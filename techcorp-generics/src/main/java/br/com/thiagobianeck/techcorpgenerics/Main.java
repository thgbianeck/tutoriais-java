package br.com.thiagobianeck.techcorpgenerics;

import br.com.thiagobianeck.techcorpgenerics.model.Produto;
import br.com.thiagobianeck.techcorpgenerics.service.ProdutoService;
import br.com.thiagobianeck.techcorpgenerics.util.CollectionUtils;

import java.util.*;

/**
 * Classe principal demonstrando o uso pr√°tico de Generics
 */
public class Main {

    public static void main(String[] args) {
        System.out.println("=== TECHCORP GENERICS DEMO ===\n");

        // Criando o service
        ProdutoService service = new ProdutoService();

        // Demonstra√ß√£o 1: Criando produtos exemplo
        System.out.println("üì¶ Criando produtos exemplo...");
        service.criarProdutosExemplo();
        System.out.println();

        // Demonstra√ß√£o 2: Listando todos os produtos
        System.out.println("üìã Listando todos os produtos:");
        List<Produto> todosProdutos = service.getRepository().findAll();
        todosProdutos.forEach(System.out::println);
        System.out.println();

        // Demonstra√ß√£o 3: Buscando produtos por categoria
        System.out.println("üîç Buscando produtos da categoria 'Eletr√¥nicos':");
        List<Produto> eletronicos = service.buscarPor(Produto::getCategoria, "Eletr√¥nicos");
        eletronicos.forEach(System.out::println);
        System.out.println();

        // Demonstra√ß√£o 4: Agrupando produtos por categoria
        System.out.println("üìä Agrupando produtos por categoria:");
        Map<String, List<Produto>> agrupados = service.agruparPorCategoria(todosProdutos);
        agrupados.forEach((categoria, produtos) -> {
            System.out.println("Categoria: " + categoria);
            produtos.forEach(p -> System.out.println("  - " + p.getNome()));
        });
        System.out.println();

        // Demonstra√ß√£o 5: Usando CollectionUtils
        System.out.println("üõ†Ô∏è Usando CollectionUtils:");

        // Filtrando produtos caros (> 1000)
        List<Produto> produtosCaros = CollectionUtils.filter(todosProdutos,
                p -> p.getPreco() > 1000);
        System.out.println("Produtos caros (> R$ 1000):");
        produtosCaros.forEach(p -> System.out.println("  - " + p.getNome() + ": R$ " + p.getPreco()));

        // Mapeando para nomes
        List<String> nomes = CollectionUtils.map(todosProdutos, Produto::getNome);
        System.out.println("Nomes dos produtos: " + nomes);

        // Ordenando por pre√ßo
        List<Produto> ordenadosPorPreco = CollectionUtils.sort(todosProdutos,
                Comparator.comparing(Produto::getPreco));
        System.out.println("Produtos ordenados por pre√ßo:");
        ordenadosPorPreco.forEach(p -> System.out.println("  - " + p.getNome() + ": R$ " + p.getPreco()));
        System.out.println();

        // Demonstra√ß√£o 6: Produto mais caro
        System.out.println("üí∞ Produto mais caro:");
        Optional<Produto> maisCaro = service.buscarMaior(Produto::getPreco);
        maisCaro.ifPresent(p -> System.out.println("  - " + p.getNome() + ": R$ " + p.getPreco()));
        System.out.println();

        // Demonstra√ß√£o 7: Map customizado (ID -> Nome)
        System.out.println("üóÇÔ∏è Map customizado (ID -> Nome):");
        Map<Long, String> mapIdNome = service.criarMapCustomizado(Produto::getId, Produto::getNome);
        mapIdNome.forEach((id, nome) -> System.out.println("  ID " + id + ": " + nome));
        System.out.println();

        // Demonstra√ß√£o 8: Wildcards em a√ß√£o
        System.out.println("üéØ Demonstrando Wildcards:");

        // Upper bounded wildcard (? extends Produto)
        List<Produto> novosProdutos = Arrays.asList(
                new Produto(6L, "Teclado Mec√¢nico", 350.0, "Eletr√¥nicos"),
                new Produto(7L, "Monitor 4K", 1800.0, "Eletr√¥nicos")
        );
        service.adicionarProdutos(novosProdutos);

        // Lower bounded wildcard (? super Produto)
        List<Object> destinoGenerico = new ArrayList<>();
        service.copiarProdutos(destinoGenerico);
        System.out.println("Elementos copiados para lista gen√©rica: " + destinoGenerico.size());
        System.out.println();

        // Demonstra√ß√£o 9: Estat√≠sticas finais
        System.out.println("üìà Estat√≠sticas finais:");
        System.out.println("Total de produtos: " + service.getRepository().count());
        System.out.println("Categorias dispon√≠veis: " +
                service.agruparPorCategoria(service.getRepository().findAll()).keySet());

        // Pre√ßo m√©dio
        double precoMedio = service.getRepository().findAll().stream()
                .mapToDouble(Produto::getPreco)
                .average()
                .orElse(0.0);
        System.out.println("Pre√ßo m√©dio: R$ " + String.format("%.2f", precoMedio));

        System.out.println("\n=== DEMO CONCLU√çDA ===");
    }
}