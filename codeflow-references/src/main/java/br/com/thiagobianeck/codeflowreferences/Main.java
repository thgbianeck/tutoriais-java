package br.com.thiagobianeck.codeflowreferences;

import br.com.thiagobianeck.codeflowreferences.references.*;

public class Main {

    public static void main(String[] args) {
        System.out.println("=== SISTEMA DE DEMONSTRA√á√ÉO DE REFER√äNCIAS ===");
        System.out.println("CodeFlow - Dominando os Tipos de Refer√™ncias em Java");
        System.out.println();

        // Configurar JVM para melhor visualiza√ß√£o
        System.out.println("Configura√ß√µes da JVM:");
        System.out.println("Max Memory: " + (Runtime.getRuntime().maxMemory() / 1024 / 1024) + " MB");
        System.out.println("Total Memory: " + (Runtime.getRuntime().totalMemory() / 1024 / 1024) + " MB");
        System.out.println("Free Memory: " + (Runtime.getRuntime().freeMemory() / 1024 / 1024) + " MB");
        System.out.println();

        try {
            // Demonstrar cada tipo de refer√™ncia
            StrongReferenceDemo.demonstrateStrongReference();
            StrongReferenceDemo.demonstrateMemoryLeak();

            SoftReferenceDemo.demonstrateSoftReference();
            SoftReferenceDemo.demonstrateCache();

            WeakReferenceDemo.demonstrateWeakReference();
            WeakReferenceDemo.demonstrateWeakHashMap();
            WeakReferenceDemo.demonstrateObserverPattern();

            PhantomReferenceDemo.demonstratePhantomReference();
            PhantomReferenceDemo.demonstrateResourceManagement();

            // Compara√ß√£o final
            ReferenceComparison.compareAllReferenceTypes();

        } catch (Exception e) {
            System.err.println("Erro durante execu√ß√£o: " + e.getMessage());
            e.printStackTrace();
        }

        System.out.println("=== DEMONSTRA√á√ÉO CONCLU√çDA ===");
        System.out.println("‚úÖ Todos os tipos de refer√™ncias foram demonstrados!");
        System.out.println("üéØ Agora voc√™ domina o controle avan√ßado de mem√≥ria em Java!");
    }
}